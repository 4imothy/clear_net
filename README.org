* [[https://en.wikipedia.org/wiki/C_(programming_language)][C]]learNet
** [[https://en.wikipedia.org/wiki/C_(programming_language)][C]] + Learn + Net
A neural net framework for the creation and training of arbitrarily sized neural nets.
Check out some of the examples in the [[./examples][examples]] directory.
** Features
- Simple interface to interact with the code
- Training through backpropagation
- Ability to save and load a neural net to a file
- Customize the activation functions for output and hidden layers
- Multiple activation functions: /Sigmoid, ReLU, Leaky_ReLU, Tanh, ELU/
** How To Use
Put this code
#+begin_src C
#define CLEAR_NET_IMPLEMENTATION
#+end_src C
at the top of the /C/ source file to tell /ClearNet/ to implement its functions.
*** Defines
Put these before including the /clear_net.h/ file in your code.
| Name                    | What it Does                                                            | Default                  |
|-------------------------+-------------------------------------------------------------------------+--------------------------|
| CLEAR_NET               | The library                                                             | Defined in /clear_net.h/ |
| CLEAR_NET_ALLOC         | The allocation strategy                                                 | /malloc/                 |
| CLEAR_NET_DEALLOC       | The deallocation strategy                                               | /free/                   |
| CLEAR_NET_ASSERT        | The assertion strategy                                                  | /assert/                 |
| CLEAR_NET_RATE          | The learning rate of the model                                          | /0.5/                    |
| CLEAR_NET_ACT_OUTPUT    | The activation function of the output layer                             | /Sigmoid/                |
| CLEAR_NET_ACT_HIDDEN    | The activation function of the hidden layer                             | /Leaky_RELU/             |
| CLEAR_NET_ACT_NEG_SCALE | When using /Leaky RELU/, or /ELU/ this is the scale for negative values | /0.1/                    |
*** Creating, Training and Saving a Neural Net
This code is from [[./examples/xor.c][xor.c]].
**** Define Training Strategy
Define hidden and output activation function
#+begin_src C
#define CLEAR_NET_ACT_OUTPUT Sigmoid
#define CLEAR_NET_ACT_HIDDEN RELU
#+end_src C
Define learning rate
#+begin_src C
#define CLEAR_NET_RATE 0.1f
#+end_src C
**** Define the Shape
#+begin_src C
  size_t* shape = {2,2,1};
  size_t* nlayers = ARR_LEN(shape);
#+end_src
**** Create the Input and Target Data
#+begin_src C
  Matrix data = alloc_mat(4, 3);
  for (size_t i = 0; i < 2; ++i) {
    for (size_t j = 0; j < 2; ++j) {
      size_t row = i * 2 + j;
      MAT_GET(data, row, 0) = i;
      MAT_GET(data, row, 1) = j;
      MAT_GET(data, row, 2) = i ^ j;
    }
   }
  Matrix input = mat_form(data.nrows, 2, data.stride, &MAT_GET(data, 0, 0));
  Matrix output = mat_form(data.nrows, 1, data.stride, &MAT_GET(data, 0, input.ncols));
#+end_src
**** Train the Model
#+begin_src C
  size_t num_epochs = 20000;
  float error;
  float error_break = 0.01;
  for (size_t i = 0; i < num_epochs; ++i) {
    net_backprop(net, input, output);
    error = net_errorf(net, input, output);
    if (i % (num_epochs / 5) == 0) {
      printf("Cost at %zu: %f\n", i, error);
    }
    if (error < error_break) {
      printf("Less than: %f error at epoch %zu\n", error_break, i);
      break;
    }
   }
#+end_src
**** Once Model is Trained
Print the results
#+begin_src C
  net_print_results(net, input, output, &roundf);
#+end_src
Save to file
#+begin_src C 
  net_save_to_file("model", net);
  // can be loaded again with
  Net net = alloc_net_from_file("model");
#+end_src
Deallocate
#+begin_src C
  dealloc_net(&net);
#+end_src

