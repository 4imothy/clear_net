* [[https://en.wikipedia.org/wiki/C_(programming_language)][C]]learNet
** [[https://en.wikipedia.org/wiki/C_(programming_language)][C]] + Learn + Net
A neural net framework for the creation and training of arbitrarily sized neural nets.
Check out some of the examples in the [[./examples][examples]] directory.
** Features
- Training with gradient descent and backpropagation
  - Momentum is optionally enabled and uses these equations
    - $v_{dw} = \beta v_{dw} + (1-\beta)dw$
    - $W = W - \alpha v_{dw}$
    - $v_{db} = \beta v_{db} + (1-\beta)db$
    - $b = b - \alpha v_{db}$
- Simple interface for hyperparameter tuning
- Ability to save and load a neural net to a file
- Customize the activation functions for output and hidden layers
- Multiple activation functions: /Sigmoid, ReLU, Leaky_ReLU, Tanh, ELU/
- An easy way to implement stochastic gradient descent, see the [[./examples/mnist.c][mnist example]]
** How To Use
Put this code
#+begin_src C
#define CLEAR_NET_IMPLEMENTATION
#+end_src C
at the top of the /C/ source file to tell /ClearNet/ to implement its functions.
*** Defines
Put these before including the /clear_net.h/ file in your code.
| Name                    | What it Does                                                            | Default                  |
|-------------------------+-------------------------------------------------------------------------+--------------------------|
| CLEAR_NET               | The library                                                             | Defined in /clear_net.h/ |
| CLEAR_NET_ALLOC         | The allocation strategy                                                 | /malloc/                 |
| CLEAR_NET_DEALLOC       | The deallocation strategy                                               | /free/                   |
| CLEAR_NET_ASSERT        | The assertion strategy                                                  | /assert/                 |
| CLEAR_NET_RATE          | The learning rate of the model                                          | /0.5/                    |
| CLEAR_NET_ACT_OUTPUT    | The activation function of the output layer                             | /Sigmoid/                |
| CLEAR_NET_ACT_HIDDEN    | The activation function of the hidden layer                             | /Leaky_RELU/             |
| CLEAR_NET_ACT_NEG_SCALE | When using /Leaky RELU/, or /ELU/ this is the scale for negative values | /0.1/                    |
*** Creating, Training and Saving a Neural Net
This code is fromh [[./examples/xor.c][xor.c]].
**** Define hyperparameters
#+begin_src C
#define CLEAR_NET_ACT_HIDDEN Sigmoid
#+end_src
**** Include header and implement the library
#+begin_src C
  #define CLEAR_NET_IMPLEMENTATION
  #include "../clear_net.h"
#+end_src
**** Define the Shape and Create The Model
#+begin_src C
    size_t shape[] = {2, 2, 1};
    size_t nlayers = sizeof((shape)) / sizeof((*shape));
    Net net = cn_alloc_net(shape, nlayers);
    cn_randomize_net(net, -1, 1);
#+end_src
**** Create the input and target data
#+begin_src C
  Matrix data = cn_alloc_matrix(4, 3);
  for (size_t i = 0; i < 2; ++i) {
      for (size_t j = 0; j < 2; ++j) {
          size_t row = i * 2 + j;
          MAT_AT(data, row, 0) = i;
          MAT_AT(data, row, 1) = j;
          MAT_AT(data, row, 2) = i ^ j;
      }
   }
  Matrix input = cn_form_matrix(data.nrows, 2, data.stride, &MAT_AT(data, 0, 0));
  Matrix target = cn_form_matrix(data.nrows, 1, data.stride, &MAT_AT(data, 0, data.ncols - 1));
#+end_src
**** Train the model
#+begin_src C
  float loss;
  size_t num_epochs = 10000;
  for (size_t i = 0; i < num_epochs; ++i) {
      loss = cn_learn(&net, input, target);
      if (i % 100 == 0) {
          printf("Average loss: %g\n", loss);
      }
  }
  printf("Final loss: %g\n", loss);
#+end_src
**** Once model is trained
*Print the results*
#+begin_src C
  cn_print_net_results(net, input, target);
#+end_src
*Save to file*
#+begin_src C
  char* file = "model";
  cn_save_net_to_file(net, file);
  cn_dealloc_net(&net, 0);
#+end_src
*Load from file and view results again*
#+begin_src C
  net = cn_alloc_net_from_file(file);
  cn_print_net_results(net, input, target);
#+end_src
*Load from file and view results again*
#+begin_src C
  cn_dealloc_net(&net, 1);
  cn_dealloc_matrix(&data);
#+end_src
